# PyQCM installation

## Default installation using pip

This is the easiest installation of PyQCM suitable for all user.
It builds the PyQCM library and download runtime dependencies automatically using default system compiler and library.

0. Install build system CMake (may change depending of your system):
```
sudo apt install cmake #for Ubuntu
```

1. Open a terminal and clone PyQCM Git repository:

```
git clone https://bitbucket.org/dsenechQCM/qcm_wed.git
cd qcm_wed #enter cloned repository
```

2. Configure Pyqcm to use whether or not optional dependencies (optional, see below):
```
export CMAKE_ARGS="[BUILD_ARG1]=[VALUE1] [BUILD_ARG2]=[VALUE2] ..."
```

3. Perform automatic installation with `pip`:

```
pip install .
```

## Build options

Build arguments and their values include:

* ``-DDOWNLOAD_CUBA=0/1``: Specify to download and compile automatically the CUBA integration library.
* ``-DCUBA_DIR=[path_to_CUBA_root_dir]``: If CUBA not downloaded from above, specify the path to CUBA directory for linking Pyqcm against (must contain compiled Cuba library (``libcuba.a``) along with the header ``cuba.h``).
* ``-DBLA_VENDOR=[value]``: BLAS implementation to use. See `CMake vendor documentation <https://cmake.org/cmake/help/latest/module/FindBLAS.html?highlight=bla_vendor#blas-lapack-vendors>`_ for more information (recommended: do not specify or ``FlexiBLAS`` on Alliance cluster).
* ``-DEIGEN_HAMILTONIAN=0/1``: Specify to compile with Eigen format for the Hamiltonian for better performance in the diagonalisation solver on multi-core machine.
* ``-DWITH_PRIMME=0/1``: Whether to use or not the PRIMME library and its eigensolver for finding ground state of the Hamiltonian (needs ``-DEIGEN_HAMILTONIAN=1``).
* ``-DPRIMME_DIR=[path_to_PRIMME_root_dir]``: Specify the path to the PRIMME root directory for linking qcm_wed library against (required if ``-DWITH_PRIMME=1``).


## Installation from source

These instructions allow a finely tunned compilation of the qcm library and dependencies for better performance.
Library and dependencies compilation and installation are no more handled automatically.

### Pyqcm

1. Clone PyQCM:

```
git clone https://bitbucket.org/dsenechQCM/qcm_wed.git
```

3. Configure and compile QCM library:

```
cd qcm_wed 
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCUBA_DIR=../Cuba-4.2.2 [...] #see build options above
make -j4
cp ./qcm.so.1.0 ../pyqcm/qcm.so
```

4. Run `setup.py` script to install the python library:

```
cd .. #exit build and go in source qcm dirs
python setup.py --skip-cmake install --user
```

### CUBA numerical integration library

1. Download and extract sources:
```
wget http://www.feynarts.de/cuba/Cuba-4.2.2.tar.gz #download
tar -xf Cuba-4.2.2.tar.gz #decompress
```

2. Configure and compile:
```
cd Cuba-4.2.2 #enter extraction CUBA directory
./configure CFLAGS="-O3 -fPIC -ffast-math -fomit-frame-pointer" #configure
make lib #compile
```

### PRIMME eigensolver

1. Download and extract sources:
```
wget https://github.com/primme/primme/archive/refs/tags/v3.2.tar.gz #download
tar -xf primme-3.2.tar.gz #decompress
```

2. Compile:
```
make lib
```

### Eigen linear algebra library

Eigen could be installed on many Linux system by their respective package manager.
For example, for Ubuntu and Debian machine:
```
sudo apt install libeigen3-dev
```

Or, on MacOS with:
```
brew install eigen
```


## Tips for compilation on Compute Canada server (not up to date)

### Compilation on Intel based cluster with ICC compiler

CUBA configure step (2): 

```
./configure FC=`which ifort` CC=`which icc` CFLAGS="-O3 -fPIC"
```

QCM configure step (3) with CMake:

```
cmake .. -DCMAKE_BUILD_TYPE=Release -DCUBA_DIR=../CUBA-4.2.2 -DCMAKE_CXX_COMPILER=`which icc` -DBLA_VENDOR=Intel10_64lp_seq -DCMAKE_INCLUDE_PATH=${MKLLROOT}/lib/intel64_lin/
```

### Compilation with FlexiBLAS

QCM configure step (3) with CMake 3.21.4: 

```
module load cmake/3.21.4 flexiblas/3.0.4 scipy-stack
cmake .. -DCMAKE_BUILD_TYPE=Release -DCUBA_DIR=../CUBA-4.2.2 -DBLA_VENDOR=FlexiBLAS
```


