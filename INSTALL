# PyQCM installation

## Defaut installation using pip

This is the easiest installation of PyQCM suitable for all user.
It builds the PyQCM library and download runtime dependencies automatically using default system compiler and library.

0. Install build system CMake (may change depending of your system):
```
sudo apt install cmake #for Ubuntu
```

1. Open a terminal and clone PyQCM Git repository:

```
git clone https://bitbucket.org/dsenechQCM/qcm_wed.git
cd qcm_wed #enter cloned repository
```

2. Perform automatic installation with `pip`:

```
pip install .
```

## Installation from source

These instructions allow a finely tunned compilation of the qcm library and dependencies for better performance.
Library and dependencies compilation and installation are no more handled automatically.

1. Clone PyQCM:

```
git clone https://bitbucket.org/dsenechQCM/qcm_wed.git
```

2. If CUBA library is not installed on your system, follow the following step:

```
wget http://www.feynarts.de/cuba/Cuba-4.2.2.tar.gz #download
tar -xf Cuba-4.2.2.tar.gz #decompress
cd Cuba-4.2.2 #enter extraction CUBA directory
./configure CFLAGS="-O3 -fPIC -ffast-math -fomit-frame-pointer" #configure
make lib #compile
cd .. #return common directory
```

3. Configure and compile QCM library:

```
cd qcm_wed #enter extraction CUBA directory
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCUBA_DIR=../Cuba-4.2.2
make
cp ./qcm.so.1.0 ../pyqcm/qcm.so
```

Note the CUBA_DIR variable must be the path to the extracted Cuba folder (step 2), or to the folder containing the compiled Cuba library (`libcuba.a`) along with the header `cuba.h`.

4. Run `setup.py` script to install the python library:

```
cd .. #exit build and go in source qcm dirs
python setup.py --skip-cmake install --user
```


## Tips for compilation on Compute Canada server

### Compilation on Intel based cluster with ICC compiler

CUBA configure step (2): 

```
./configure FC=`which ifort` CC=`which icc` CFLAGS="-O3 -fPIC"
```

QCM configure step (3) with CMake:

```
cmake .. -DCMAKE_BUILD_TYPE=Release -DCUBA_DIR=../CUBA-4.2.2 -DCMAKE_CXX_COMPILER=`which icc` -DBLA_VENDOR=Intel10_64lp_seq -DCMAKE_INCLUDE_PATH=${MKLLROOT}/lib/intel64_lin/
```

### Compilation with FlexiBLAS

QCM configure step (3) with CMake 3.21.4: 

```
module load cmake/3.21.4 flexiblas/3.0.4 scipy-stack
cmake .. -DCMAKE_BUILD_TYPE=Release -DCUBA_DIR=../CUBA-4.2.2 -DBLA_VENDOR=FlexiBLAS
```


